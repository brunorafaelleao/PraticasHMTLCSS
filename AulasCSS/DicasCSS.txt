1) Existem 3 formas de escrever CSS
- in line
- CSS interno
- CSS externo

-> Para CSS in line, após abrir uma tag podemos colocar a formatação.
ex:
 <h1 style="color: red; font-size: 30px;">Meu título com formatação diferente</h1>
 No caso acima usamos uma formatação de cor e de fonte (tamanho) para o nosso h1 (título)

-> Para CSS interno, precisamos abrir uma tag style dentro do arquivo HTML. Pode ser
antes das tags da página.
ex:
<body>
    <style>
      p {
        color: rgb(11, 15, 236);
        font-size: 25px;
      }
    </style>
//essa tag style indica que todos os parágrafos terão cor azul e tamanho da fonte 25px
    <h1 style="color: red; font-size: 35px">
      Meu título com formatação diferente
    </h1>
    <p>Um texto sobre a página</p>

-> Para CSS externo, criar um novo arquivo com a extensão .css e dentro desse arquivo fazer as estilizações
e importar esse arquivo no nosso arquivo.html linkando com a tag: <link rel="stylesheet" href="/AulasCSS/Desafio01Hashtag/desafio01.css">
ex: /* Formatação dos parágrafo */
p{
  font-family: Tahoma;
  color: cadetblue;
}
obs: Um nome padrão é style.css



2) Seletores. Existem 3 tipos de seletores: 
-> Tags = usados para aplicar esilos em tags de um arquivo
HTML. 
ex: Quando faço isso, digo que todos as tags de parágrados terão a
formatação inserida dentro das chaves
p{
  font-family: Tahoma;
  color: cadetblue;
}

-> IDs = usados para aplicar estilos em tags específicas no arquivo html.
ex: Para aplicar um estilo a um parágrafo, após abrir a tag, inserimos o id="nomedoid". No arquivo CSS,
formtamos esse estilo usando #nomedoid{} e dentro das chaves colocamos nossas formatações.
No arquivo HTML: <p id="Nome-Geind">GEIND-RURAL</p>
No arquivo CSS: #Nome-Geind{
  font-weight: bold;
  font-family: Lucida Sans;
  color: coral;
}

->  Classes = usados para aplicar estilos em "blocos" de tags
ex: No arquito HTML aplicamos o atributo class onde queremos estilizar e no arquivo CSS inicializamos a classe.
No arquivo HTML:
<h2 class="numoa">NUMOA-RURAL</h2>
    <p class="numoa">Setor importante</p>
    <p class="numoa">Setor de Monitoramento</p>
No arquivo CSS
.numoa {
  font-family: Arial;
  color: red;
  font-weight: bold;
}

3) Combinando seletores
-> É possível combinar seletores tag.
ex: Quero que meus elementos de texto tenham a mesma fonte, mas cada um terá seu tamanho diferenciado.
h1, h2, h3, p{
  font-family: sans-serif
  }

h1{  font-size: 64px;}

h2{font-size: 32px;}

h3{font-size: 20px;}

p{font-size: 18px;}

4) Tipos de estilização:
-> fonte: font-family: sans-serif
-> tamanho da fonte: font-size: 12
-> itálico: font-style: italic;
-> Escurecer (negrito ou peso): font-weight:
-> Cor: color: #hexadecimal ou rgb (r, g, b)

5) Para tamanho da linha (altura)
->  line-height:

6) Para colocar um texto em maiúsculo ou caixa alta
-> text-transform: uppercase;

7) Para colocar um estilo de formatação em uma tag <a (link)
ex:
a {
  text-decoration: dotted;
  text-decoration-line: underline;
  color: rgb(0, 0, 300);
  font-weight: bold;
}
Obs: no exemplo acima o texto ficará em negrito, azul como sua cor, e o sublinhado é pontilhado com um a linha.
Se quisermos sem sublinhado é só colocar text-decoration: none

8) Colocar uma formatação para o link visitado:
ex:
.cabecalho-lista a {
  text-decoration: none;
  color: #112e61; /* Cor do link */
}

.cabecalho-lista a:visited {
  color: #112e61; /* Cor do link visitado */
}
obs: Nesse caso, o link está dentro de uma classe porque a mesma classe tem mais formatações

9) Especificidade no CSS
-> Prioridades:
De Menor prioridade ao Maior prioridade:
Universal < Tag < Classe/Pseudo-classe < ID < Inline < !important

10) Margens e Padding
-> Para escolher margens. (obs: Espaçamento externo)
ex: Colocar margens em um parágrafo seguimos a seguinte lógica
 <style>
      p {
        /* todos os lados
        margin: 10px; */

        /* em cima 10px e nos lados 25px
        margin: 10px 25px; */

        /* em cima, direita, em baixo e esquerda */
        margin: 10px 20px 30px 40px;
      }
    </style>
<div>
   <p>Parágrafo 1</p>
   <p>Parágrafo 2</p>
</div>

-> Para escolher Padding. (Espaçamento interno)
ex: Semelhante a regra das margens:
<style>
      p {
         padding: 10px, 200px, 100px, 4000px;
      }
    </style>
    <div>
      <p>Parágrafo 1</p>
      <p>Parágrafo 2</p>
    </div>

obs: Para colocar uma margem ou um padding mais específico:
ex: especificar onde quer atribuir:
margin-right: 10px
padding-top: 20px

11) Dimensões e Unidades
-> Corresponde a largura e altura, por exemplo, de uma div
ex:
  <style>
    div {
      width: 100px;
      height: 30px;
      background-color: brown;
    }
  </style>

-> Sobre unidades temos
a)medida absoluta:
- pixels (px)

b)medida relativas:
- vh (viewport height) - quando uso essa medida, digo que quero um percentual da altura do meu dispositivo
- vw (viewport width)  - quando uso essa medida, digo que quero um percentual da largura do meu dispositivo
- em (sempre depende do tamanho da fonte do elemento pai) - quando uso essa medida ele vai formatar segundo o elemento principal. Ele multiplica pelo valor do pai
- rem (sempre depende do tamanho da fonte do elemento pai html, ou seja, a maior tag)

12) Pseudo-Classes
-> Palavras-chave colocadas junto a um seletor e que representam estados de um seletor
as mais conhecidas:
- hover: um tipo de realce ao passar o cursor do mouse sobre uma tag
- tem também a link, visited e active
ex:
<body>
  <style>
    /* LVHA */
  a:link{
    color: goldenrod;
  }
  a:visited{
    color: green;
  }
  a:hover{
    color: blue;
  }
  a:active{
    color: red;
  }
  p:hover{
    color: red;
    font-size: 25px;
  }
      
  </style>
  <p>Meu parágrafo</p>
  <a href="https://www.hashtagtreinamentos.com/">site hashtagtreinamentos</a>
</body>

13) Pseudo-elementos
-> semelhantes as pseudo-classes e não representam um estado mas um elemento filho dele mesmo
ex: Vamos colocar uns elementos na formatação de um Parágrafo onde a primeira letra será formatada diferente de todo o texto,
a primeira linha terá uma cor vemelha e depois do parágrafo terá um elemento de texto
<style>
      p::first-letter{
        font-size: 25px;
        font-weight: 500;
      }
      p::first-line{
        color: red;
      }
      p::after{
        content: 'Texto final';
      }
    </style>

14) Seletor Universal
-> Um seletor universal é representado pelo asterisco * e serve para indicar que todos os elementos terão aquele
formato
ex:
* {
        color: red;
      }

15) Herança de estilos
-> Funciona quando um elemento pai (body) recebe uma formatação. Os elementos filho (p, h, a ...) que tiverem alguma formatação
serão formatados de acordo com o pai. No exemplo abaixo, mesmo que h1 tenha qualquer outra cor, ele receberá a formatação do 
ex:
<style>
      * {
        color: red;
        margin: 0;
        padding: 0;
      }
      body{
        color: red;
      }
      h1 {
        margin-bottom: 10px;
      }
    </style>

16) Sombras
-> Sobre sombras, segue o exemplo de como aplicar a uma div:
ex:
.div {
        width: 20rem;
        height: 20rem;
        background-color: green;
        /* desloc horizontal, desloc vertical, raio de desfoque, raio de propagação, cor */
        box-shadow: 1rem 0.5rem 1rem 1rem rgb(196, 175, 175) ;
      }
obs: Para aplicar uma sombra mais interna, usar inset
ex: box-shadow: inset 1rem 0.5rem 1rem 1rem rgb(196, 175, 175) ;

17) Elementos arredondados
-> Para arredondar uma div, usaremos a propriedade border-radius
ex:
.div {
        margin-top: 2rem;
        margin-left: 2rem;
        width: 20rem;
        height: 20rem;
        background-color: green;
        border-radius: 2rem;}
obs: Para arredondar e gerar um formato circular, basta usar:
border-radius 50%;

18) Tipos de visualização
-> A propriedade é display
a) block -> mesmo que eu não coloque, nossas tags já estão por padrão em um bloco
exceção da tag <a> (âncora). o block ocupa todo o espaço disponível do início ao fim.
Se eu colocar vários blocos, eles ficam empilhados

b) inline -> dentro da linha. É o caso do padrão das tags <a>. Se colocar vários inlines,
eles ficam lado a lado

c) inline-block -> Ele ocupa apenas o espaço do conteúdo e não quebra linhas


d) none

obs: margin e padding se aplicam aos blocos mas não aos inline

ex:
<style>
      * {
        margin: 0;
        padding: 0;
      }
      html {
        font-size: 62.5%;
      }
      h1 {
        display: inline;
        font-size: 3.2rem;
      }
      h2 {
        display: none;
        font-size: 2.4rem;
      }
      p,
      a {
        font-size: 1.6rem;
      }
      span{
        display: inline;
        font-style: italic;
        color: red;
      }
    </style>

19) Tipos de posicionamento
a) static - ela é padrão. Quando não defino nada ele que é usado por padrão

b) relative - ele pode mudar em relação ao eixo de acordo com o que eu defino
ex: desloca do topo 20rem
.div{
      position: relative;
      top: 20rem;
      width: 20rem;
      height: 20rem;
      background-color: green;
      color: brown;
    }
  </style>
  <div class="div">
    <a href="">Acesse meu site</a>
  </div>

c) absoluto - significa que o elemento fique sempre na mesma posição em relação a outro elemento
ex: Obs: /* lembrar de colocar posicionamento relativo o elemento para o qual
        quero deixar minha âncora absoluta */
<body>
    <style>
      html {
        font-size: 62.5%;
      }
      a {
        color: inherit;
        /* lembrar de colocar posicionamento relativo o elemento para o qual
        quero deixar minha âncora absoluta */
        position: absolute;
        bottom: 0;

        font-size: 1.6rem;
      }
      .div {
        position: relative;
        /* top: 20rem;
      left: 20rem; */
        width: 20rem;
        height: 20rem;
        background-color: green;
        color: white;
      }
    </style>
    <div class="div">
      <a href="">Acesse meu site</a>
    </div>
    <p>Parágrafo</p>
  </body>

d) fixed - posicionamento fixo na tela (sempre estará na posição escolhida)
ex: indicar que meu elemento fique sempre fixado na posição esolhida
p{
        position: fixed;
        bottom: 0;
        right: 1rem;
      }

e) sticky - funciona como o fixed



20) Propriedade inherit
-> Para que um elemento herde as propriedades de um elemento maior (filho herda do pai)
temos a propriedade inherit.
ex: A cor do elemento será a mesma cor do maior a ele ou de onde ele está inserido
A âncora vai herdar a cor da div em que está inserida.
a{
      color: inherit;
      font-size: 1.6rem;
    }
    .div{
      width: 20rem;
      height: 20rem;
      background-color: green;
      color: brown;
    }
  </style>
  <div class="div">
    <a href="">Acesse meu site</a>
  </div>

21) Background color e image
-> Para colocar um background em uma div, usar a propriedade "background-color:"
ex:
.div{
  "background-color: 'nome da cor ou hexadecimal';
}
-> Efeito gradiente: background-image
ex:  background-image: linear-gradient(180deg, blue, red);
obs: um efeito gradiente, linear que tem 180 graus e começa com a cor azul e termina com a cor vermelho
-> Colocar imagem como background, usar a propriedade background-image: url("/caminho da imagem.png")
ex:
.div{
        /* background-color: #1d5205; */
        background-image: url(https://www.hashtagtreinamentos.com/wp-content/uploads/2022/06/BACKGROUN-banner-01.png); --> caminho da imagem
        background-position: 50%;   -->Ocupa a posição mais central ou metade da imagem
        background-size: cover; --> Cobre toda a div ou elemento
        background-repeat: no-repeat; --> Não repete a imagem
        }
